
// App config
var express = require('express');
// var router = express.Router();
var app = express();
// Firebase App (the core Firebase SDK) is always required and
// must be listed before other Firebase SDKs
var firebase = require("firebase/app");

//nodemailer
//const nodemailer = require('nodemailer');

var bodyParser = require('body-parser');
var errorHandler = require('errorhandler');
var methodOverride = require('method-override');
var fs = require('fs');
var multer = require('multer');
var error = "";
var storage = multer.diskStorage({
    destination: function(req, file, callback) {
        callback(null, 'temp');
    },
    filename: function(req, file, callback) {
        fileName = req.body.datasetname + ".csv";
        callback(null, fileName);
    }
});
var loggedUser;
var authState = {
    isAuthReady: false,
    isPerformingAuthAction: false,
    isVerifyingEmailAddress: false,
    isSignedIn: false,

    user: null,
    avatar: '',
    displayName: '',
    emailAddress: '',


    addAvatarDialog: {
        open: false,

        errors: null
    },

    changeAvatarDialog: {
        open: false,

        errors: null
    },


};
//
var upload = multer({ storage: storage }).single('csvfile');
var db;
var hostname = process.env.HOSTNAME || 'localhost';
var port = 8080;
var currentUser; // Need to implement token/scope authentication
const path = require('path');
const VIEWS = path.join(__dirname, 'views');
app.use(methodOverride());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }))
app.use(express.static(__dirname + '/public'));
app.use(errorHandler());

app.set('view engine', 'ejs');
app.set('views', __dirname + '/views');

//var routes = require('./routes/index.js');
//app.use('/login', routes);
//app.use('/createAccount', routes)

// MongoDB
var mongo = require('mongodb');
var MongoClient = require('mongodb').MongoClient;
//var mongoUri = "mongodb+srv://meteorstudio:Meteor101@maproom-rzdrm.mongodb.net/maproom";
var mongoUri = "mongodb+srv://dbuser:test@cluster0.0jf1o.mongodb.net/cluster0?retryWrites=true&w=majority";
var mongoose = require('mongoose');
mongoose.set('useCreateIndex', true);

// Initialize the connection once
mongoose.connect(mongoUri, { useNewUrlParser: true }, function(err) {
    logWithTimeStamp("Maproom started");

    if (err) {
        console.log('Error occured when connecting to MongoDB.', error.message);
        throw err;
    } else {
        console.log('Successfully connected to MongoDB');
    }

    // Start the application after the database connection is ready.
    app.listen(port);
    console.log("Server listening at http://" + hostname + ":" + port);
});

// Logging tools
var intl = require('intl')
const intlDf = new Intl.DateTimeFormat('en-us', { hour: 'numeric', minute: 'numeric', second: 'numeric', day: 'numeric', month: 'numeric', year: 'numeric', timeZone: 'America/Phoenix' });

// Express Routing

/**
 * index
 */
app.get('/', function(req, res) {
        //console.log(cookie);
    if(checkCookie("rememberme",req) == true)
    {
        //console.log("Test");
                var cookie = getCookie("rememberme",req);
        firebase.auth().signInWithCustomToken(cookie).then(cred => {
                 loggedUser = cred.user;
                 //console.log(loggedUser.email);

             },function(error) {
                    // Handle Errors here.
                    var errorCode = error.code;
                    var errorMessage = error.message;
                    console.log(error);
                    res.append('Set-Cookie',"rememberme"+"="+"; path/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;");

               		res.render('index',
			        {
				        error: "Please re-login."
			        });
                    failure = true;
                    return;

               }).then(function(result){

               		res.render('dashboard',
			        {
				        email: loggedUser.email,
			            error: ""
			        });

                    return;
               });


    }

    else
    {
        console.log("No token, or token expired - redirecting to index.");
               		res.render('index',
			{
				error: ""
			});
    }



});



});
